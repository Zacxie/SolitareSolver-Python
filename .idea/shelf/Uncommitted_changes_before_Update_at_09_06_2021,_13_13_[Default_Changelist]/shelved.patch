Index: main.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import sys\nimport stateRecognizer\n\nif sys.version_info[0] >= 3:\n    import PySimpleGUI as sg\nelse:\n    import PySimpleGUI27 as sg\nimport cv2 as cv\nfrom PIL import Image\nimport io\nfrom sys import exit as exit\nfrom opencv import analyze\nimport client\n\n\"\"\"\nDemo program that displays a webcam using OpenCV\n\"\"\"\n\n\ndef main():\n    #constants\n    noneMSG = 'NONE'\n\n    sg.ChangeLookAndFeel('LightGreen')\n\n    # define the window layout\n    layout = [[sg.Text('OpenCV Demo', size=(40, 1), justification='center', font='Helvetica 20')],\n              [sg.Text('Your moves', size=(40, 1), justification='left', font='Helvetica 14')],\n              [sg.Multiline(size=(30, 30),disabled=True, key='textbox',justification='top'),sg.Image(filename='', key='image')],\n              [sg.ReadButton('Exit', size=(10, 1), pad=((200, 0), 3), font='Helvetica 14'),\n               sg.RButton('Start Capture', size=(10, 1), font='Any 14'),\n               sg.RButton('End Capture', size=(10, 1), font='Any 14'),\n               sg.RButton('New Game', size=(10, 1), font='Any 14')]]\n\n    # create the window and show it without the plot\n    window = sg.Window('Demo Application - OpenCV Integration',\n                       location=(800, 400))\n    window.Layout(layout).Finalize()\n\n\n\n    #Initialize video capture and dimensions\n    cap = cv.VideoCapture(1)\n    _, frame = cap.read()  #\n    height, width, _ = frame.shape\n\n    #Init the stateRecognizer\n    recognizer = stateRecognizer.StateRecognizer(width, height)\n\n    #State parameters\n    analyzing = False\n    firstRound = True\n    moveList = ''\n    unknownCard = True\n    newCards = noneMSG\n    numOfExpectedCards = 7\n\n\n\n    # ---===--- Event LOOP Read and display frames, operate the GUI --- #\n    while True:\n\n        # Configure buttons\n        if not recognizer.isReady(numOfExpectedCards):\n            window['End Capture'].update(disabled=True)\n        elif analyzing:\n            window['End Capture'].update(disabled=False)\n\n        button, values = window.read(timeout=0)\n\n        #Button choice\n        if button == 'Exit' or values is None:\n            sys.exit(0)\n\n        elif button == 'Start Capture':\n            analyzing = True\n            recognizer.resetTurn()\n\n        elif button == 'New Game':\n\n            recognizer.reset()\n            moveList = ''\n            window['textbox'].update(moveList)\n            firstRound=True\n            numOfExpectedCards = 7\n\n        elif button == 'End Capture':\n            newCards = noneMSG\n            answer = \"Yes\"\n            analyzing = False\n            window['End Capture'].update(disabled=True)\n\n            if firstRound:\n                newCards = recognizer.evaluateFirstRound()\n                firstRound=False\n                answer = sg.popup_yes_no('Confirming state',\n                                         'New cards this round were: ' + str(newCards),\n                                         'Are you satisfied with the current state recognized?',\n                                         keep_on_top=True)\n\n            elif unknownCard:\n                #Only look for new card if unkownCard is true\n                newCards = recognizer.evaluate()\n                numOfExpectedCards = numOfExpectedCards + 1\n\n                answer = sg.popup_yes_no('Confirming state',\n                                         'New card this round was: ' + str(newCards),\n                                         'Are you satisfied with the current state recognized?',\n                                         keep_on_top=True)\n\n            if (answer==\"Yes\"):\n                client.send(newCards)\n                msg = client.recieve()\n                msgItems = msg.split(\";\")\n\n                #1st item is description of move\n\n                moveList = \"Turn: \"+msgItems[3]+\"\"+msgItems[0] + '\\n\\n' + moveList\n                window['textbox'].update(moveList)\n\n\n                #2nd item is true/false describing if a new card is revealed\n                if msgItems[1] == 'true' or msgItems[1] == 'True':\n                    unknownCard = True\n                else:\n                    unknownCard = False\n\n                #3rd item is either GAME_WON, GAME_LOST or empty\n\n\n            elif (answer==\"No\"):\n                recognizer.resetTurn()\n                window['End Capture'].update(disabled=True)\n\n        # Capture frame-by-frame\n        ret, frame = cap.read()\n\n        if (analyzing):\n            # Get OpenCV to recognize\n            frame = analyze(cap, recognizer, numOfExpectedCards)\n\n        # Display the resulting frame\n        # cv.imshow('frame', frame)\n        gray = cv.cvtColor(frame, cv.COLOR_BGR2RGB)\n\n        # let img be the PIL image\n        img = Image.fromarray(gray)  # create PIL image from frame\n\n        bio = io.BytesIO()  # a binary memory resident stream\n        img.save(bio, format='PNG')  # save image as png to it\n        imgbytes = bio.getvalue()  # this can be used by OpenCV hopefully\n        window.FindElement('image').Update(data=imgbytes)\n\nmain()\n\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/main.py b/main.py
--- a/main.py	(revision e7c77197b0deb0b90d8f3c8e7293c245a40fcf3b)
+++ b/main.py	(date 1623226419235)
@@ -40,7 +40,7 @@
 
 
     #Initialize video capture and dimensions
-    cap = cv.VideoCapture(1)
+    cap = cv.VideoCapture(0)
     _, frame = cap.read()  #
     height, width, _ = frame.shape
 
