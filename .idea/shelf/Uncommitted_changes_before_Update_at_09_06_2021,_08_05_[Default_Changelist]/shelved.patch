Index: main.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import sys\nimport stateRecognizer\n\nif sys.version_info[0] >= 3:\n    import PySimpleGUI as sg\nelse:\n    import PySimpleGUI27 as sg\nimport cv2 as cv\nfrom PIL import Image\nimport io\nfrom sys import exit as exit\nfrom opencv import analyze\nimport client\n\n\"\"\"\nDemo program that displays a webcam using OpenCV\n\"\"\"\n\n\ndef main():\n    sg.ChangeLookAndFeel('LightGreen')\n\n    # define the window layout\n    layout = [[sg.Text('OpenCV Demo', size=(40, 1), justification='center', font='Helvetica 20')],\n              [sg.Text('Your moves', size=(40, 1), justification='left', font='Helvetica 14')],\n              [sg.Multiline(size=(30, 5),disabled=True, key='textbox',justification='top'),sg.Image(filename='', key='image')],\n              [sg.ReadButton('Exit', size=(10, 1), pad=((200, 0), 3), font='Helvetica 14'),\n               sg.RButton('Start Capture', size=(10, 1), font='Any 14'),\n               sg.RButton('End Capture', size=(10, 1), font='Any 14'),\n               sg.RButton('New Game', size=(10, 1), font='Any 14')]]\n\n    # create the window and show it without the plot\n    window = sg.Window('Demo Application - OpenCV Integration',\n                       location=(800, 400))\n    window.Layout(layout).Finalize()\n\n\n\n    #Initialize video capture and dimensions\n    cap = cv.VideoCapture(0)\n    _, frame = cap.read()  #\n    height, width, _ = frame.shape\n\n    #Init the stateRecognizer\n    recognizer = stateRecognizer.StateRecognizer(width, height)\n\n    #State parameters\n    capturing = False\n    firstRound = True\n\n\n    # ---===--- Event LOOP Read and display frames, operate the GUI --- #\n    while True:\n\n\n        button, values = window.read(timeout=0)\n\n        if button == 'Exit' or values is None:\n            sys.exit(0)\n        elif button == 'Start Capture':\n            recognizer.reEvaluate()\n        elif button == 'New Game':\n            recognizer.reset()\n        elif button == 'End Capture':\n            newCards = \"None\"\n            if firstRound:\n                newCards = recognizer.evaluateFirstRound()\n                firstRound=False\n            else:\n                newCards = recognizer.evaluate()\n\n            answer = sg.popup_yes_no('Confirming state',\n                                     'New card this round was: ' + str(newCards),\n                                     'Are you satisfied with the current state recognized?',\n                                     keep_on_top=True)\n            if (answer==\"Yes\"):\n                print(\"Du har gemt det her frame\")\n                client.send(newCards)\n\n            elif (answer==\"No\"):\n                print(\"Vi genstarter genkendelsen\")\n\n        # Capture frame-by-frame\n        ret, frame = cap.read()\n\n        #Get OpenCV to recognize\n        frame = analyze(cap, recognizer)\n\n        # Display the resulting frame\n        #cv.imshow('frame', frame)\n        gray = cv.cvtColor(frame, cv.COLOR_BGR2RGB)\n\n        # let img be the PIL image\n        img = Image.fromarray(gray)  # create PIL image from frame\n\n        bio = io.BytesIO()  # a binary memory resident stream\n        img.save(bio, format='PNG')  # save image as png to it\n        imgbytes = bio.getvalue()  # this can be used by OpenCV hopefully\n        window.FindElement('image').Update(data=imgbytes)\n\n\nmain()\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/main.py b/main.py
--- a/main.py	(revision c18817e6c53f1d494a8b4868ff9fde950a4b9b41)
+++ b/main.py	(date 1623134961132)
@@ -60,6 +60,7 @@
         elif button == 'Start Capture':
             recognizer.reEvaluate()
         elif button == 'New Game':
+
             recognizer.reset()
         elif button == 'End Capture':
             newCards = "None"
